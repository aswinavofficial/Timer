{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","totalMinutes","setTotalMinutes","totalSeconds","setTotalSeconds","totalTime","timeLeft","setTimeLeft","timerRunning","setTimerRunning","currentTask","setCurrentTask","interval","useRef","padZero","time","toString","padStart","minutes","Math","floor","seconds","className","value","onChange","e","currentTarget","contentEditable","suppressContentEditableWarning","onInput","textContent","onClick","current","setInterval","localStorage","setItem","clearInterval","disabled","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.346314b0.chunk.js","sourcesContent":["import React, { useState,useRef } from 'react';\nimport './App.css';\n\nexport default function App() {\n\n  const[totalMinutes,setTotalMinutes] = useState(25)\n  const[totalSeconds,setTotalSeconds] = useState(0)\n  const[timeLeft,setTimeLeft] = useState(totalTime())\n  const[timerRunning,setTimerRunning] = useState(false)\n  const[currentTask,setCurrentTask] = useState(\"#Lets Crack It\")\n  let interval = useRef(null)\n\n  function padZero(time) {\n    return time.toString().padStart(2,'0');\n  }\n\n  function totalTime() {\n\n    return totalMinutes * 60 + totalSeconds;\n\n  }\n\n  function taskCompleted() {\n\n    localStorage.setItem(\"task\",currentTask);\n  }\n\n  function startTimer() {\n\n    if(interval.current ==null) {\n\n      setTimerRunning(true)\n      setTimeLeft(totalTime())\n      interval.current = setInterval(()=> {\n      setTimeLeft(timeLeft => {\n\n        if(timeLeft>= 1)\n        return timeLeft - 1;\n\n        taskCompleted()\n        setTimerRunning(false)\n        clearInterval(interval.current);\n        setTimeLeft(totalTime());\n        return 0;\n      })\n    },1000);\n\n  }\n  }\n\n  function stopTimer() {\n\n    setTimerRunning(false)\n    clearInterval(interval.current);\n    interval.current = null;\n  }\n\n  function resetTimer() {\n\n    setTimerRunning(false)\n    clearInterval(interval.current);\n    setTimeLeft(totalTime());\n    interval.current = null;\n\n  }\n  let minutes = Math.floor(timeLeft / 60);\n  let seconds = Math.floor(timeLeft - minutes*60);\n  return (\n    <div className=\"app\">\n      {/* <h2>Pomodoro!</h2> */}\n      <div className=\"task\">\n          <input  \n          value={currentTask}\n          onChange ={(e)=> {\n            setCurrentTask(e.currentTarget.value)\n          }}/>\n      </div>\n\n      <div className=\"timer\">\n      <span contentEditable={!timerRunning} \n         suppressContentEditableWarning={true}\n          onInput={(e)=> {\n            setTotalMinutes(e.currentTarget.textContent)\n          }}>\n        {padZero(minutes)}\n      </span>\n\n      <span>:</span>\n      \n        <span contentEditable={!timerRunning} \n         suppressContentEditableWarning={true}\n          onInput={(e)=> {\n            setTotalSeconds(e.currentTarget.textContent)\n          }}>\n        {padZero(seconds)}\n      </span>\n      </div>\n\n      <div className=\"buttons\">\n        <button \n          onClick = {startTimer}\n          disabled={timerRunning}>\n          Start\n        </button>\n        <button \n          onClick ={stopTimer}\n          disabled={!timerRunning}>\n          Stop\n          </button>\n        <button onClick={resetTimer}>Reset</button>\n      </div>\n\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n\n"],"sourceRoot":""}